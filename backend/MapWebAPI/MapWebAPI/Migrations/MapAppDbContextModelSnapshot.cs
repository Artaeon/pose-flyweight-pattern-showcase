// <auto-generated />
using System;
using MapWebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MapWebAPI.Migrations
{
    [DbContext(typeof(MapAppDbContext))]
    partial class MapAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MapWebAPI.Models.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AttributeId")
                        .HasName("PK__Attribut__C18929EABA5C8DE7");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("MapWebAPI.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<int?>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__E7FEA497D0DBDC5C");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MapWebAPI.Models.LocationType", b =>
                {
                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IconPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LocationTypeId")
                        .HasName("PK__Location__737D32F95032DA9A");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("MapWebAPI.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79CEA081B53A");

                    b.HasIndex("LocationId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MapWebAPI.Models.Attribute", b =>
                {
                    b.HasOne("MapWebAPI.Models.LocationType", "LocationType")
                        .WithMany("Attributes")
                        .HasForeignKey("LocationTypeId")
                        .HasConstraintName("FK__Attribute__Locat__29572725");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("MapWebAPI.Models.Location", b =>
                {
                    b.HasOne("MapWebAPI.Models.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .HasConstraintName("FK__Locations__Locat__267ABA7A");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("MapWebAPI.Models.Review", b =>
                {
                    b.HasOne("MapWebAPI.Models.Location", "Location")
                        .WithMany("Reviews")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Reviews__Locatio__2C3393D0");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MapWebAPI.Models.Location", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MapWebAPI.Models.LocationType", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
